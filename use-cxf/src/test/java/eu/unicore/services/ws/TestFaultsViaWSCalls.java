/*********************************************************************************
 * Copyright (c) 2006 Forschungszentrum Juelich GmbH 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * (1) Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the disclaimer at the end. Redistributions in
 * binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 * 
 * (2) Neither the name of Forschungszentrum Juelich GmbH nor the names of its 
 * contributors may be used to endorse or promote products derived from this 
 * software without specific prior written permission.
 * 
 * DISCLAIMER
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ********************************************************************************/
 

package eu.unicore.services.ws;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Calendar;

import org.junit.Before;
import org.junit.Test;
import org.oasisOpen.docs.wsrf.rp2.UpdateResourcePropertiesDocument;
import org.w3.x2005.x08.addressing.EndpointReferenceType;

import de.fzj.unicore.wsrflite.ContainerProperties;
import de.fzj.unicore.wsrflite.Home;
import de.fzj.unicore.wsrflite.InitParameters;
import de.fzj.unicore.wsrflite.Resource;
import de.fzj.unicore.wsrflite.persistence.Persistence;
import de.fzj.unicore.wsrflite.xmlbeans.BaseFault;
import de.fzj.unicore.wsrflite.xmlbeans.ResourceProperties;
import de.fzj.unicore.wsrflite.xmlbeans.client.BaseWSRFClient;
import de.fzj.unicore.wsrflite.xmlbeans.exceptions.ResourceUnavailableFault;
import de.fzj.unicore.wsrflite.xmlbeans.exceptions.ResourceUnknownFault;
import eu.unicore.services.ws.cxf.CXFServiceFactory;
import eu.unicore.services.ws.impl.WSResourceHomeImpl;
import eu.unicore.services.ws.testutils.JettyTestCase;
import eu.unicore.util.Log;

/**
 * tests the faults that are generated by the server, by sending faulty web service requests
 */
public class TestFaultsViaWSCalls extends JettyTestCase {


	@Before
	public void addServices() throws Exception{
		if(kernel.getService("wsrf")!=null){
			return;
		}
		kernel.getContainerProperties().setProperty(ContainerProperties.WSRF_PERSIST_CLASSNAME, Persistence.class.getName());
		CXFServiceFactory.createAndDeployService(kernel, 
				"wsrf",
				WSServerResource.class,
				WSResourceHomeImpl.class,null);
	}
	
	@Test
	public void testResourceUnknownFault() throws Exception {
		String url=server.getUrls()[0]+"/services/wsrf";
		EndpointReferenceType epr=EndpointReferenceType.Factory.newInstance();
		epr.addNewAddress().setStringValue(url+"?res=nonexistingResource");
		BaseWSRFClient client=new BaseWSRFClient(url,epr, getClientSideSecurityProperties());
		try{
			//get nonexisting resource
			client.getResourcePropertyDocument();
			fail("Expected exception here.");
		}catch(ResourceUnknownFault e){
			System.out.println("**** Received: "+e.getFaultInfo());		
		}
		catch(Exception e){
			System.out.println(Log.createFaultMessage("Received wrong exception "+e.getClass(), e));
			fail("Got wrong type of baseFault");
		}
	}
	
	@Test
	public void testResourceUnavailableFault() throws Exception {
		Home h=kernel.getHome("wsrf");
		String id=h.createResource(new InitParameters());
		EndpointReferenceType epr=EndpointReferenceType.Factory.newInstance();
		String url=server.getUrls()[0]+"/services/wsrf"+"?res="+id;
		epr.addNewAddress().setStringValue(url);
		BaseWSRFClient client=new BaseWSRFClient(url,epr,getClientSideSecurityProperties());
		
		//lock the resource
		Resource resource=h.getForUpdate(id);
		
		try{
			Calendar cal=Calendar.getInstance();
			cal.add(Calendar.YEAR,1);
			client.setTerminationTime(cal);
			fail("Expected exception here.");
		}catch(ResourceUnavailableFault e){
			System.out.println("**** Received: "+e.getFaultInfo());		
		}
		catch(Exception e){
			e.printStackTrace();
			System.out.println("** general exception received instead of ResourceUnavailableFault");
			fail("Got wrong type of baseFault");
		}
		finally{
			h.getStore().unlock(resource);
		}
	}
	
	@Test
	public void testWrongParams() throws Exception {
		String url=server.getUrls()[0]+"/services/wsrf";
		EndpointReferenceType epr=EndpointReferenceType.Factory.newInstance();
		Home h=kernel.getHome("wsrf");
		String id=h.createResource(new InitParameters());
		epr.addNewAddress().setStringValue(url+"?res="+id);
		BaseWSRFClient client=new BaseWSRFClient(url,epr,getClientSideSecurityProperties());
		assertNotNull(client.getResourceProperty(WSServerResource.RPcurrentTimeQName));
		
		try{
			//call method with missing parameter
			ResourceProperties rp=client.makeProxy(ResourceProperties.class);
			UpdateResourcePropertiesDocument req=UpdateResourcePropertiesDocument.Factory.newInstance();
			req.addNewUpdateResourceProperties().addNewUpdate();
			rp.UpdateResourceProperties(req);
			fail("Expected exception here.");
		}catch(BaseFault e){
			assertTrue(e.getFaultInfo().toString().contains("Invalid update"));
			System.out.println("Received base fault: "+e.getFaultInfo());
		}
	}
	
}
