VO configuration HOWTOs
~~~~~~~~~~~~~~~~~~~~~~~

SAML-PULL and UNICORE - basic case
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section shows all the steps which are required to setup a
UNICORE/X server and Unity to work in the SAML-PULL mode.  In this
scenario we will use Unity to store at a central point mappings of DNs
to UNIX logins (Xlogins) and roles of of our users. The UNICORE/X
server will then query (pull) attributes from Unity, similar to using
an XUUDB.

[NOTE]
===========
We write UNICORE/X in the following, but any server based on the UNICORE
Services Environment (registry, workflow, etc) works the same way
===========

The required steps are:
	
 1. Add Unity's CA certificate to the UNICORE/X truststore (so SSL connections can be established)
 2. Add UNICORE/X's CA certificate to the Unity server's truststore (so SSL connections can be established).
 3. Add the UNICORE/X server's DN (from its certificate) as a member to the Unity service. You don't have
    to make it a member of any particular VO (or group). However it must have the *read* permission to 
    all groups where its users will be placed. In Unity, this corresponds to the "Priviledged Inspector" role
    (check Unity documentation for details).
 4. Check that UNICORE/X can properly authenticate to Unity on the SAML endpoint that is used to query attributes.
    Generally this will be via the UNICORE/X certificate, if that is not possible, you'll need to setup an additional
    username identity for the entity created in Step 3, and setup password authentication.
 5. Create a VO (possibly with subgroups). Add users to the group.
    Here we will assume this group is +/Math-VO/UUDB/SiteA+. 
    Next assign them _in the scope of the group_ attribute
	+urn:unicore:attrType:xlogin+ with the value of Unix UID for the user, and attribute 
	+urn:unicore:attrType:role+ with the value of the user's role (usually its just +user+).
	Note that if you want to assign the same Xlogin/role to multiple users then you can
	define Unity _group attributes_ and set them for the whole +/Math-VO/UUDB/SiteA+ group.
 6. Enable VO attribute source ("SAML PULL") in the UNICORE server. Here we will configure it as the primary
    source and leave XUUDB to provide local mappings (which can override data fetched from Unity). 
    You should have the following entries:
+
----------
container.security.attributes.order=SAML-PULL XUUDB
container.security.attributes.combiningPolicy=MERGE_LAST_OVERRIDES
# ...  xuudb configuration omitted

container.security.attributes.SAML-PULL.class=eu.unicore.uas.security.vo.SAMLPullAuthoriser
----------

 7. Configure VO attribute source (typically in the +vo.config+) file as follows:
+
------------------
vo.group=/Math-VO/UUDB/SiteA

vo.truststore.type=directory
vo.truststore.directoryLocations.1=/opt/unicore/certs/unity/*.pem

vo.localServerURI=https://example.org:7777

# ##########################
# PULL mode configuration
# ##########################

vo.pull.enable=true

vo.pull.cacheTtl=20

vo.pull.voServerURL=https://unity.example.org/unicore-soapidp/saml2unicoreidp-soap/AssertionQueryService

vo.pull.verifySignatures=false

# Mapping of Unity attributes (right side) to the special, recognized by UNICORE 
#  incarnation attributes (left)  
vo.unicoreAttribute.xlogin=urn:unicore:attrType:xlogin
vo.unicoreAttribute.xlogin.default=urn:unicore:attrType:defaultXlogin
vo.unicoreAttribute.role=urn:unicore:attrType:role
vo.unicoreAttribute.role.default=urn:unicore:attrType:defaultRole
vo.unicoreAttribute.group=urn:unicore:attrType:primaryGid
vo.unicoreAttribute.group.default=urn:unicore:attrType:defaultPrimaryGid
vo.unicoreAttribute.supplementaryGroups=urn:unicore:attrType:supplementaryGids
vo.unicoreAttribute.supplementaryGroups.default=urn:unicore:attrType:defaultSupplementaryGids
vo.unicoreAttribute.addDefaultGroups=urn:unicore:attrType:addDefaultGroups
vo.unicoreAttribute.queue=urn:unicore:attrType:queue
vo.unicoreAttribute.queue.default=urn:unicore:attrType:defaultQueue
vo.unicoreAttribute.virtualOrganisations=urn:SAML:voprofile:group
------------------

8. In the VO truststore directory (/opt/unicore/certs/unity/ in this case) put
the Unity certificate (NOT the CA certificate) as a PEM file, with pem extension.


Advanced example: Unity and UNICORE - using fine grained authorization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this scenario we will enhance the first one to use custom authorization attributes in UNICORE 
policy. To do so ensure that you have this setting in +vo.config+ file: 
+vo.pull.enableGenericAttributes=true+. Then you can modify XACML policy to require certain 
VO attributes.

Important fact to note here (and in case of PUSH mode too) is how the
user's group membership is encoded as an XACML attribute.  By default
it is an attribute of string type (so XACML
'DataType="http://www.w3.org/2001/XMLSchema#string"') with its name
('AttributeId') equal to 'urn:SAML:voprofile:group'. The example
policy below uses this attribute.

The following XACML fragment allows for reaching TargetSystemFactory service only for the users which are
both members of VO +Example-VO+ and a VO group +/Math-VO/UUDB/SiteA+. Moreover those users
also must have a standard UNICORE/X attribute role with a value 'user'. It means that in Unity, UNICORE
users must have +urn:unicore:attrType:role+ attribute defined (it is the 
standard setting) with a value 'user'.
	

-----------------
<Rule RuleId="AcceptTSF" Effect="Permit">
  <Description>
    Accept selected users to reach TSF
    </Description>
  <Target>
    <Resources>
      <Resource>
        <ResourceMatch MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
          <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI">TargetSystemFactoryService</AttributeValue>
          <ResourceAttributeDesignator DataType="http://www.w3.org/2001/XMLSchema#anyURI" AttributeId="urn:oasis:names:tc:xacml:1.0:resource:resource-id"/>
        </ResourceMatch>
      </Resource>
    </Resources>
  </Target>
  <Condition>
    <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:and">
      <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
        <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
          <SubjectAttributeDesignator DataType="http://www.w3.org/2001/XMLSchema#string" AttributeId="role"/>
        </Apply>
        <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">user</AttributeValue>
      </Apply>
      <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:any-of-all">
        <Function FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal"/>
        <SubjectAttributeDesignator DataType="http://www.w3.org/2001/XMLSchema#string" AttributeId="urn:SAML:voprofile:group"/>
        <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-bag">
          <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">/Example-VO</AttributeValue>
          <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">/Math-VO/UUDB/SiteA</AttributeValue>
        </Apply>
      </Apply>
    </Apply>
  </Condition>
</Rule>
-----------------

