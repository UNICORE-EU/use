[[use_configuration]]
Configuration of UNICORE/X
--------------------------

Overview of the main configuration options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

USE based UNICORE servers are a fairly complex software which has many 
interfaces to other UNICORE components
and configuration options. This section tries to give an overview of what can 
and should be configured. The detailed configuration guide follows in the next sections.

==== Mandatory configuration

 - Certificates and basic security: UNICORE uses X.509 certificates for all servers,
configured in the wsrflite.xml config file

 - Attribute sources: to map clients (i.e. X.509 certificates) to local attributes such as 
user name, groups and role, various attribute sources are available. For details,
consult the xref:use_aip[attribute sources section].

UNICORE/X has several sub-components. These are configured using
several config files residing in the CONF directory, see 
the xref:use_install[installation guide] for the location of the CONF directory.


Settings for the UNICORE/X process (e.g. memory)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The properties controlling the Java virtual machine running the
UNICORE/X process are configured in
  
  - UNIX: the CONF/startup.properties configuration file
  
  - Windows: the "CONF\\wrapper.conf" configuration file
  

These properties include settings for maximum memory, and also the properties
for configuring JMX, see the xref:use_admin[admin guide] for more on JMX.  

  
Config file formats
~~~~~~~~~~~~~~~~~~~

USE uses two different formats for configuration. 
  
==== Java properties

    - Each property can be assigned a value using the syntax "name=value"
  
    - Please do not quote values, as the quotes will be interpreted as part of the value

    - Comment lines are started by the "#" 
  
    - Multiline values are possible by ending lines with "\", e.g.
  
-------
      name=value1 \
      value2
-------
   
In this example the value of the "name" property will be "value1 value2".
    

==== XML

Various XML dialects are being used, so please refer to the example files distributed with
UNICORE for more information on the syntax. In general XML is a bit unfriendly to edit, and
it is rather easy to introduce typos. 

[NOTE]
============
It is advisable to run a tool such as 'xmllint' after editing XML files to check for
typos
============

Integration of UNICORE/X into a UNICORE infrastructure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since UNICORE/X is the central component, it is interfaced to other parts of the UNICORE architecture, 
i.e. the Gateway, the Registry and the TSI.

==== Gateway

The gateway address is usually hard-coded into CONF/wsrflite.xml, and on the gateway side
there is an entry VSITE_NAME=address pointing to the UNICORE/X container. In some
scenarios it's convenient to auto-register with a gateway. This can be enabled using the 
+container.security.gateway.*+ properties which are given below.

[NOTE]
=========
To use the autoregistration feature, the gateway configuration must be set up accordingly
=========

==== Registry

It is possible to configure UNICORE/X to contact one or more 
external or "global" Registries in order to publish information on crucial services
there. Most of the following properties deal with the automatic discovery 
and/or manual setup of the external registries being used.

.Registry settings
[options="header"]
|====================
| property name 		| range of values	  | description	| modifyable at runtime
| container.externalregistry.use	| "true", "false" |whether to publish service information in an external registry|yes
| container.externalregistry.url	| a valid URL	  | use this URL for external registry if automatic discovery is switched off or fails|yes
| container.externalregistry.url.*	| valid URLs      | additional registry URLs | yes 
| container.wsrf.sg.defaulttermtime | a long value | alive-check interval for registry entries in seconds ; an external registry will enforce its own value |yes
|================================

Security
~~~~~~~~
  
==== Overview

Security is a complex topic, and many options exist. On a high level, the following items
need to be configured.
   
   - SSL setup (keystore and truststore settings for securing the basic communication between components).
   See <<use-authtrust>> section below for details and a reference of available options.
   
   - Attribute sources configuration (which will map Grid users to local properties such as role, 
   Unix login and groups). Attribute sources provide information about which local role and properties 
   a Grid user has.
   UNICORE knows several attribute sources which can be combined using various combining algorithms.
   The detailed description of the configuration options can be found in <<use_aip>>, while a list
   of all available options is in the below table.
    
   - Access control setup (controlling in detail who can do what on which services). 
   Access control works by checking a Grid user's attributes (obtained from the attribute sources)
   against a set of policies. Again, detailed description is in <<use_pdp>>, while parameters reference
   is in the below table.
   
See <<use_security_concepts>> for general overview of the security concepts.


[[use-secref]]
==== General security options

This table presents all security related options, except credential and truststore settings 
which are described in the subsequent section.

include::use-ref-security.txt[]


:leveloffset: 2

[[use-authtrust]]
include::sec-authtrustcfg.txt[]

:leveloffset: 0

