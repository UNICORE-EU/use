[[use_rest_configuration]]
RESTful services
----------------

Authentication
~~~~~~~~~~~~~~

RESTful services require configuration of the available mechanisms for
end user authentication, which will check the supplied credentials and map
the user to a distinguished name (DN).

This configuration is done in the container config file (typically +uas.config+ or
+container.properties+).

The enabled authentication options and their order are configured 
similarly to the attribute sources, using a list of enabled mechanisms.
For example

----------
container.security.rest.authentication.order=FILE UNITY-OAUTH X509
----------

As you can see, you can use one or more authentication methods,
UNICORE will try all configured authentication options in order.

For each enabled option, a set of additional properties is used
to configure the details (for example the Unity address)


Username-password file
^^^^^^^^^^^^^^^^^^^^^^

The FILE mechanism uses a map file containing username, password
and the DN. Required configuration is the location of the file.

----------
container.security.rest.authentication.FILE.class=eu.unicore.services.rest.security.FilebasedAuthenticator
container.security.rest.authentication.FILE.file=conf/rest-users.txt
----------

The file format is
------------
#
# on each line:
# username:hash:salt:DN
#
demouser:<...>:<...>:CN=Demo User, O=UNICORE, C=EU
------------

i.e. each line gives the username, the hashed password, the salt and
the user's DN, separated by colons. To generate entries, i.e. to hash the 
password correctly, the 'md5sum' utility can be used. For example, 
if your intended password is 'test123', you could do

------------
$> SALT=$(tr -dc "A-Za-z0-9_$&!=+#" < /dev/urandom | head -c 16 | xargs)
$> echo "Salt is ${SALT}"
$> echo -n "${SALT}test123" | md5sum
------------

which will output the salted and hashed password. Here we generate a
random string as the salt. Enter these together with the username, and
the DN of the user into the password file.


Unity authentication using OAuth2 Bearer token
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This mechanism uses the OAuth2 token sent from the client (HTTP
"Authorization: Bearer ..." header) to authenticate to Unity.
In Unity terms, this uses the endpoint of type "SAMLUnicoreSoapIdP"
with authenticator of type "oauth-rp with cxf-oauth-bearer".

----------
container.security.rest.authentication.UNITY-OAUTH.class=eu.unicore.services.rest.security.UnityOAuthAuthenticator
container.security.rest.authentication.UNITY-OAUTH.address=https://localhost:2443/unicore-soapidp-oidc/saml2unicoreidp-soap/AuthenticationService
# validate the received assertions?
container.security.rest.authentication.UNITY-OAUTH.validate=true
----------

UNICORE must be configured to trust the assertions issued by the Unity server, please
refer to the relevant section on trusted assertion issuers in the manual.

Unity authentication using username/password
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This mechanism takes the username/password sent from the client (HTTP Basic auth)
and uses this to authenticate to Unity, retrieving an authentication assertion.

----------
container.security.rest.authentication.UNITY.class=eu.unicore.services.rest.security.UnitySAMLAuthenticator
container.security.rest.authentication.UNITY.address=https://localhost:2443/unicore-soapidp/saml2unicoreidp-soap/AuthenticationService
# validate the received assertions?
container.security.rest.authentication.UNITY.validate=true
----------


UNICORE must be configured to trust the assertions issued by the Unity server, please
refer to the relevant section on trusted assertion issuers in the manual.

X.509 certificate
^^^^^^^^^^^^^^^^^

UNICORE supports X.509 client certificates for authentication.

----------
container.security.rest.authentication.order= ... X509 ...

container.security.rest.authentication.X509.class=eu.unicore.services.rest.security.X509Authenticator
----------

NOTE that this requires Gateway 7.3.0 or later.

PAM
^^^

This authentication module allows to authenticate users with the
username and password that they have on the UNICORE/X system.

----------
container.security.rest.authentication.order= ... PAM ...

container.security.rest.authentication.X509.class=eu.unicore.services.rest.security.PAMAuthenticator
container.security.rest.authentication.X509.DNTemplate=CN=%s, OU=pam-local-users
----------

The parameter "DNTemplate" is used to define which DN will be assigned to authenticated users,
where the "%s" will be replaced by the user name. In the example above, user "test-user" will have the
DN "CN=test-user, OU=pam-local-users".

There is also a PAM attribute source that you can use to automatically
assign role="user" as well the Unix login and groups correctly for
authenticated users.

----------
container.security.attributes.order= ... PAM ...
container.security.attributes.PAM.class=eu.unicore.services.rest.security.PAMAttributeSource
----------




OAuth2 authentication using a Bearer token
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

It is also possible to directly authenticate to an OAuth2 server, contact unicore-support for details.



JWT Delegation
~~~~~~~~~~~~~~

Beginning with UNICORE 8.0.0, delegation is fully supported for REST
services.  The delegating server creates a JWT token containing user
authentication information and signs it with its private key. The
receiving server can check the signature using the sender's public
key.

Public keys are distributed via the shared service Registry.

The lifetime of the issued tokens is 300 seconds by default, which can be changed
via

----
container.security.rest.jwt.lifetime=300
----


For very simple cases, e.g. when no shared registry is used, a shared
hmac secret can be configured as well. The length of the secret must be
at least 32 characters

----
container.security.rest.jwt.hmacSecret=.... 
----

This secret must be the same on all the UNICORE servers that are
supposed to trust  each other.
