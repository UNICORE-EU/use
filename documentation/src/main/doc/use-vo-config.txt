[[use_vo_configuration]]
Configuration
~~~~~~~~~~~~~

This sections describes the default configuration file format which is
used to configure the VO attribute source. This section provides a
detailed and comrehensive information on all configuration options. In
the most cases defaults are fine - you can consult the HOWTO (below)
for a short 'quick start' information.

Some of the configuration options require a value of a VO/GROUP type. 
Whenever it is needed it should be written in the following way:

---------
/VO[/group1[/subgroup2[...]]]
---------

where elements in square brackets are optional. E.g. +/Math/users+
denotes a group 'users' of a VO called 'Math'.


In case of UNICORE/X and other USE servers the configuration is
provided in a separate file, by default the +vo.config+ from the
configuration directory of the server (you can change location and
name of this file, see below). It holds generic VO configuration which
is not dependent to the actual server used - the most of settings is
configured there. This file options are described
xref:use_vo-configfile[below].

To enable the VO subsystem certain settings are also required in the
main server's configuration file. You have to define an appropriate
Attribute Source. You can use only one or even use multiple
instances. The latter situation occurs when you want to support
multiple VOs (from one or multiple VO servers) - then you have to
define one attribute source per VO (or VO group).

Example with a VO attribute sources and also with local XUUDB.  Local
data from XUUDB (if it exists) will override attributes received from
VOs:

----------
container.security.attributes.order=SAML-PULL XUUDB
# ... here comes xuudb configuration

container.security.attributes.SAML-PULL.class=eu.unicore.uas.security.vo.SAMLPullAuthoriser
container.security.attributes.SAML-PULL.configurationFile=conf/vo.config
----------

Before proceeding to fill the VO configuration it is suggested to prepare the VO truststore, 
which should contain *ONLY* the certificates of the trusted VO servers. Note that
this file must not contain any CA certificates, only the trusted VO servers' certificates!
This file is optional, but will increase security.

Logging configuration is done by means of standard UNICORE logging configuration file. See
<<use_vo_logging>> section for possible settings related to 
the VO subsystem.

[[use_vo-configfile]]
Main VO configuration file
^^^^^^^^^^^^^^^^^^^^^^^^^^

The following sections provide complete reference of available options
for the main configuration file (usually +vo.config+).

include::use-ref-voProperties.txt[]

The following table shows options, which are used to define mappings of SAML attributes to UNICORE incarnation attributes
(the available names of UNICORE incarnation attributes are provided in <<use_incarnation-attributes>>).

[width="100%",cols="<45%m,15%<,40%<",frame="topbot",options="header"]
|===========================================================
|Property name							|Range of values	|Description
|vo.unicoreAttribute.NAME 				|URI			    |Value must be a SAML attribute name which will be used as a UNICORE internal incarnation attribute NAME.
|vo.unicoreAttribute.NAME.default 		|URI				|Value must be a SAML attribute name which will be used as a default for UNICORE internal incarnation attribute NAME.
|vo.unicoreAttribute.NAME.disabled 		|ANY, IGNORED		|When this attribute is present regardless of its value the NAME attribute won't be mapped.
|===========================================================

Example mapping for Unity attributes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Note that your distribution should contain a sensible default for
Unity attribute mappings, which does not need to be modified.

---------
# standard settings for the xlogin mapping, however let's ignore pushed xlogins
vo.unicoreAttribute.xlogin=urn:unicore:attrType:xlogin
vo.unicoreAttribute.xlogin.default=urn:unicore:attrType:defaultXlogin
vo.unicoreAttribute.xlogin.pushDisabled=

#standard role mapping
vo.unicoreAttribute.role=urn:unicore:attrType:role
vo.unicoreAttribute.role.default=urn:unicore:attrType:defaultRole

#supplementary groups are stored in a non standard attribute
vo.unicoreAttribute.supplementaryGroups=urn:ourCompany:secondaryGids

#and group - without default
vo.unicoreAttribute.group=urn:unicore:attrType:primaryGid

#queue mapping is defined, but will be ignored (disabled)
vo.unicoreAttribute.queue=urn:unicore:attrType:queue
vo.unicoreAttribute.queue.default=urn:unicore:attrType:defaultQueue
vo.unicoreAttribute.queue.disable=

# addDefaultGroups - is not defined, so won't be mapped

#getting the user's groups is always a good idea
vo.unicoreAttribute.virtualOrganisations=urn:SAML:voprofile:group
---------


[[use_vo_logging]]
Logging configuration
^^^^^^^^^^^^^^^^^^^^^

All components use the usual log4j/2 logging mechanism. All events are
logged with +unicore.security.vo+ prefix. The reporting class name is
appended.

As an example, a configuration for logging all events for the VO
subsystem can be specified as follows:

---------
logger.vo.name=unicore.security.vo
logger.vo.level=trace
---------

