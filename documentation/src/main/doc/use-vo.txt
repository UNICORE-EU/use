[[use_vo]]
Virtual Organisations (VO) Support
----------------------------------

VO (Virtual Organisation) is a quite broad concept. VO server software
(such as Unity) is used to store identities of federated entities
along with their attributes.  Entities are managed with the usage of
groups to help administration.  Those attributes can be used e.g. for
authorization purposes. It is described here how to take advantage of
this approach in any service based on the UNICORE Services Environment
such as UNICORE/X, Workflow Service, etc.

In the following we use Unity as our VO service, though in principle
other SAML servers can be used.

Overview
~~~~~~~~

Features
^^^^^^^^

All the below features can be used in any combinations, independently:

 - Unity can provide all user attributes to by used for authorization
 and for accessing resources, also those which are unsupported by the
 more simple attribute sources (including full support for default and
 allowed attributes).  Therefore it can be used as a central attribute
 source for multiple sites. Since attributes can be assigned in a group
 scope, it is possible to use a central service with mappings, still
 having some of the values (for instance Unix user IDs) which are different for
 each site. It is simple to assign same attribute for groups of users.
 - It is possible to assign non-standard attributes and use them for
   authorization or for quality of service purposes
 - As it is possible (as always in UNICORE) to mix attributes from
 multiple attribute sources, Unity can provide federation-wide
 settings (for example, the UNICORE role), while local settings (like
 Unix gids or uids) are assigned locally by particular sites. This is
 especially useful when using a dynamic attribute source as a
 complementary one to the static attribute source: Unity
 provides federation-wide authorization attributes (such as role) and
 dynamic source assigns local uids/gids.
 

The system works in *PULL mode*, i.e. as an attribute source.
Attributes are pulled (fetched) by the module from a VO service
specified in a configuration file when a new request arrives. This
mode is transparent for clients.
 
VO selection
^^^^^^^^^^^^

Some of the VO features (such as authorization), require only
information about all VOs the user is a member of and associated
attributes. However in many cases it is required to assign user's
request to a particular VO and to execute it in the VO scope. This is
for instance needed when a special gid is assigned basing on the
user's VO or when VOs should be charged for their jobs.

To associate a request with a VO the user has to select one or
administrator can define a default which is used when user didn't
select a VO. User can select an effective VO using request preference
+selectedVirtualOrganisation+. Of course it must be one of the VOs the
user is member of.

Administrator can configure a list of preferred VOs. If such a list is
provided, then the first VO from the list, where the user is a member
is used when user don't provide her own selection. See the general
security configuration options for the syntax: <<use-secref>>.
    
If it is required that all requests should have the effective VO set,
then it is possible to deny other requests using an additional rule in
the authorization policy. The rule should deny all requests that
doesn't have the selectedVO authorization attribute. See
<<use_policies>> for details.


Supported VO servers
^^^^^^^^^^^^^^^^^^^^

This module was tested and works well with the Unity system.

There are other possibilities and you can try to use any SAML (2.0)
Attribute service.  We are interested in all success/failure stories!


[[use_VO-planning]]
VO deployment planning
^^^^^^^^^^^^^^^^^^^^^^

First of all it must be decided which VO/group (in UNICORE case it
doesn't matter whether a VO or VO subgroup is used, all subgroups can
be treated as a full-fledged VOs, and VOs are just a nick-name of
top-level groups) is used by a site.

In case when a site needs only generic, federation-wide attributes
from a VO, a group which is common for all sites should be used. Such
a group can provide for instance the 'role' attribute for the
members. Of course if uids are the same across all sites, then uids
can be also assigned in such VO.

In the case when a site needs also some site-specific attributes, a
dedicated group should be created for the site, as a subgroup of a VO
(e.g /VO1/sites/SiteA). VO administrators should assign VO-scoped
attributes in this group and make sure that all universal VO
attributes are also replicated there. Please note that Unity allows
for outsourcing VO management on a per-group basis, so it is possible
to assign administrative permissions to such group, for a site
representative.

The next issue is how to handle a situation when there are multiple
Unix user IDs or roles available for the user, and how to mark the
default one? To overcome this, for every incarnation attribute it is
possible to define two VO attributes. The base one can possess many
values (e.g. in case of UIDs every value is a different UID)
while the additional attribute holds a single default value. When
there is no need for multiple values then the base attribute can be
used alone. When default attribute is defined then its value is used
unless a user provided some preferences. Of course such preferences
must be valid, i.e.  be included in the allowed values of the base
attribute.

Details on what attributes are used for those purposes are presented
in the following section.
 
include::use-vo-config.txt[]

include::use-vo-howto.txt[]
