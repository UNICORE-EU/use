[[use_aip]]
Attribute sources
-----------------

The authorization process in UNICORE/X requires that each UNICORE user
(identified by an X.500 DN) is assigned some _attributes_ such as her
_role_. Attributes are also used to subsequently run tasks for the
authorized user and possibly can be used for other purposes as well
(for instance for accounting).

Therefore the most important item for security configuration is
selecting and maintaining a so called _attribute source_ (called sometimes
attribute information point, AIP), which is
used by USE to assign attributes to UNICORE users.

Several attribute sources are available, that can even be combined 
for maximum flexibility and administrative control.

There are two kinds of attribute sources:

 - _Classic_ or _static attribute sources_, which are used BEFORE authorization. Those attribute
 sources maintain a simple mappings of user certificates (or DNs) to some attributes. The primary role
 of those sources is to provide attributes used for authorization, but also incarnation attributes
 may be assigned. 
 - _Dynamic attribute sources_, which are used AFTER authorization, only if it was successful. Therefore 
 these attribute sources can assign only the incarnation attributes. The difference is that 
 attributes are collected for already authorized users, so the attributes can be assigned in dynamic
 way not only using the user's identity but also all the static attributes. This feature can be used for
 assigning pool accounts for authorized users or adding additional supplementary gids basing
 on user's Virtual Organization.

[[use_incarnation-attributes]]
UNICORE incarnation and authorization attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note that actual names of the attributes presented here are not very important. Real attribute
names are defined by attribute source (advanced attribute sources, like Unity/SAML attribute
source, even provide a possibility to choose what attribute names are mapped to internal UNICORE 
attributes). Therefore it is only important to know the concepts represented by the 
internal UNICORE attributes. On the other hand the values which are defined below are important.   

The attributes in UNICORE can be multi-valued.

There are two special authorization attributes:

   - 'role' - represents an abstract user's role. The role is used in a default (and rarely changed)
   UNICORE authorization policy and in authorization process in general. There are several 
   possible values that are recognized by the default authorization policy: 
     - +user+ - value specifies that the subject is allowed to use the site as a normal user
     (submit jobs, get results, ...)
     - +admin+ - value specifies that the subject is an administrator and may do everything. 
     For example may submit jobs, get results of jobs of other users and even delete them.
     - +banned+ - user with this role is explicitly banned and all her request are denied.
     - anything else - means that user is not allowed to do anything serious. Some very basic,
     read-only operations are allowed, but this is a technical detail. 
     Also access to owned resources is granted, what can happen if the user had the +user+ 
     role before. Typically it is a good practice to use value +banned+ in such case.
   - 'virtualOrganisations' - represents an abstract federated group of the user. By default it is not used directly 
     anywhere in the core stack, but several subsystems (as dynamic attribute sources or 
     jobs accounting) may be configured to use it.   


There are several attributes used for incarnation:

   - 'xlogin' - specifies which local user id (in UNIX called 'uid') should be assigned to 
   the UNICORE user.
   - 'group' - specifies the primary group (primary gid) that the UNICORE user should get. 
   - 'supplementaryGroups' - specifies all supplementary groups the UNICORE user should get.
   - 'addDefaultGroups' - boolean attribute saying whether groups assigned to the 
   Xlogin (i.e. the local uid of the UNICORE user) in the operating system should be additionally
   added for the UNICORE user.
   - 'queue' - define which BSS queues are allowed for the particular user.


Finally UNICORE can consume other attributes. All other attributes can be used only for 
authorization or in more advanced setups (for instance using the UNICORE/X incarnation tweaker).
Currently all such additional attributes which are received from attribute source are treated
as XACML attributes and are put into XACML evaluation context. This feature is rather
rarely used, but it allows for creating a very fine grained authorization policies, using
custom attributes. 

Particular attribute source define how to assign these attribute to users. Not always 
all types of attributes are supported by the attribute source, 
e.g. XUUDB can not define (among others) per-user queues or VOs.

After introducing all the special UNICORE attributes, it must be noted that those attributes are
used in two ways. Their primary role is to strictly define what is allowed for the
user. For instance the _'Xlogin' values specify the valid uids from which the user may
choose one_. One exception here is 'Add operating system groups' - user is always able to 
set this according to his/her preference.

The second way of using those attributes is to specify the default behavior, when the user 
is not expressing a preference. E.g. a default 'Group' (which must be single valued) 
specify which group should be used, if user doesn't provide any.

Attribute sources define the permitted values and default values for the attributes in 
various ways. Some use conventions (e.g. that first permitted value is a default one), some
use a pair of real attributes to define the valid and default values of one UNICORE attribute.     

Configuring Attribute Sources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[NOTE]
=========
The following description is for configuring the classic, static attribute sources.
However everything written here applies also to configuration of the dynamic sources: 
the only difference is that instead of +container.security.attributes.+ property prefix,
the +container.security.dynamicAttributes.+ should be used.
=========

[NOTE]
=========
The full list of options related to attribute sources is available here: <<use-secref>>.
=========


To configure the static attribute sources, the +container.security.attributes.order+ 
property in the configuration file is used. This is a space-separated 
list with attribute sources names, where the named attribute sources will 
be queried one after the other, allowing you to query multiple 
attribute sources, override values etc. 

A second property, +container.security.attributes.combiningPolicy+, allows you 
to control how attributes from different sources are combined.

For example, the following configuration snippet

------
#
# Authorisation attribute source configuration
# 
container.security.attributes.order=XUUDB FILE

#
# Combining policy
#
# MERGE_LAST_OVERRIDES (default), FIRST_APPLICABLE, FIRST_ACCESSIBLE or  MERGE
container.security.attributes.combiningPolicy=MERGE_LAST_OVERRIDES
------  

will declare two attribute sources, "XUUDB" and "FILE", which should
be both queried and combined using the MERGE_LAST_OVERRIDES policy.

Since multiple attribute sources can be queried, it has to be defined how 
attributes will be combined. For example, assume you have both XUUDB and FILE,
and both return a xlogin attribute for a certain user, say "xlogin_1" and "xlogin_2".

The different combining policies are
  
  - +MERGE_LAST_OVERRIDES+ : new attributes override those from previous sources. 
In our example, the result would be "xlogin_2". 
  
  - +FIRST_APPLICABLE+ : the attributes from the first source that returned a non 
empty list of attributes are used. In our case this would be "xlogin_1". If there 
were no xlogin attribute for the user in XUUDB then "xlogin_2" would be returned.
  
  - +FIRST_ACCESSIBLE+ : the attributes from the first source that is accessible are used. 
In our case this would be "xlogin_1". This policy is useful for redundant attribute sources. 
E.g. you can configure two instances of XUUDB with the same users data; the 2nd one will 
be tried only if the first one is down.  
  
  - +MERGE+ : attributes are merged. In our example, the result would be "xlogin_1, xlogin_2",
and the user would be able to choose between them.


Each of the sources needs a mandatory configuration option defining
the Java class, and several optional properties that configure the
attribute source. In our example, one would need to configure both
the "XUUDB" and the "FILE" source:

------  
container.security.attributes.XUUDB.class=...
container.security.attributes.XUUDB.xuudbHost=...
...

container.security.attributes.FILE.class=...
container.security.attributes.FILE.file=...
...

------ 
 
Additionally you can mix several combining policies together, see "Chained attribute source" 
below for details.


Available attribute sources
~~~~~~~~~~~~~~~~~~~~~~~~~~~


XUUDB
^^^^^

The XUUDB is the standard option in UNICORE. It has the following features:
  
   - Web service interface for querying and administration. It is suitable for serving data for multiple 
   clients. Usually it is deployed to handle attributes for a whole UNICORE site running multiple service
   containers.
   
   - Access can be protected by a client-authenticated SSL
   
   - XUUDB can store static mappings of UNICORE users: the local +xlogin+, +role+ and +project+ attributes 
   (where +project+ maps to Unix groups)
   
   - XUUDB since version 2 can also assign attributes in a dynamic way, e.g. from pool accounts.

   - Multiple xlogins per DN, where the user can select one
   
   - Entries are grouped using the so-called 'Grid component ID' (GCID). This makes it easy to
assign users different attributes when accessing different UNICORE/X servers.
    
Full XUUDB documentation is available from http://www.unicore.eu/documentation/manuals/xuudb
   
To enable and configure the XUUDB as a static attribute source, 
set the following properties in the configuration file:

----------
container.security.attributes.order=... XUUDB ...
container.security.attributes.XUUDB.class=eu.unicore.uas.security.XUUDBAuthoriser
container.security.attributes.XUUDB.xuudbHost=https://<xuudbhost>
container.security.attributes.XUUDB.xuudbPort=<xuudbport>
container.security.attributes.XUUDB.xuudbGCID=<your_gcid>
----------

To enable and configure the XUUDB as a dynamic attribute source, 
set the following properties in the configuration file:

----------
container.security.dynamicAttributes.order=... XUUDB ...
container.security.dynamicAttributes.XUUDB.class=eu.unicore.uas.security.xuudb.XUUDBDynamicAttributeSource
container.security.dynamicAttributes.XUUDB.xuudbHost=https://<xuudbhost>
container.security.dynamicAttributes.XUUDB.xuudbPort=<xuudbport>
----------


SAML Virtual Organizations aware attribute source (e.g. Unity)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

UNICORE supports SAML attributes, which can be either fetched by the
server or pushed by the clients, using a Virtual Organisations aware
attribute source. In the most cases Unity is deployed as a server
providing attributes and handling VOs, as it supports all UNICORE
features and therefore offers a greatest flexibility, while being
simple to adopt.  SAML attributes can be used only as a static
attribute source.

The SAML attribute source is described in a separate section: <<use_vo>>.




File attribute source
^^^^^^^^^^^^^^^^^^^^^

This attribute source uses a single map file to map DNs to xlogin,
role and other attributes (only static mappings are possible).  It is
useful when you don't want to setup an additional service like the
XUUDB, or when you want to locally override attributes for
selected users (e.g. to ban somebody).

In contrast to the XUUDB, the File attribute source can store all
types of attributes, while the XUUDB only handles role, uid and group.
  
To use, set
  
----------
container.security.attributes.order=... FILE ...
container.security.attributes.FILE.class=eu.unicore.uas.security.file.FileAttributeSource
container.security.attributes.FILE.file=<your map file>
container.security.attributes.FILE.matching=<strict|regexp>
----------

The map file itself has the following format: 
  
------------
<?xml version="1.0" encoding="UTF-8"?>
<fileAttributeSource>
   <entry key="USER DN">
      <attribute name="role">
         <value>user</value>
      </attribute>
      <attribute name="xlogin">
         <value>unixuser</value>
         <value>nobody</value>
         ...
      </attribute>
      ...
   </entry>
   ...
</fileAttributeSource>
------------


You can add an arbitrary number of attributes and attribute values.

The 'matching' option controls how a client's DN is mapped to a file entry.
In 'strict' mode, the canonical representation of the key is compared with the 
canonical representation of the argument. In 'regexp' mode the key is considered 
a Java regular expression and the argument is matched with it.  When constructing 
regular expressions a special care must be taken to construct the regular expression 
from the canonical representation of the DN. The canonical representation is defined 
http://download.oracle.com/javase/6/docs/api/javax/security/auth/x500/X500Principal.html#getName(java.lang.String)[here].
(but you don't have to perform the two last upper/lower case operations).
In 90% of all cases (no multiple attributes in one RDN, no special characters, no 
uncommon attributes) it just means that you should remove extra spaces between RDNs.  

The evaluation is simplistic: the first entry matching the client is used (which is 
important when you use regular expressions). 

The attributes file is automatically refreshed after any change, before a subsequent read. 
If the syntax is wrong then an error message is logged and the old version is used.

Recognized attribute names are: 

   - +xlogin+
   - +role+
   - +group+
   - +supplementaryGroups+
   - +addOsGroups+ (with values +true+ or +false+)
   - +queue+
    
Attributes with those names (case insensitive) are handled as special UNICORE incarnation
attributes. The correspondence should be straightforward, e.g. the +xlogin+ is 
used to provide available local OS user names for the client. 

For all attributes except of the +supplementaryGroups+ the default value is the first one
provided. For +supplementaryGroups+ the default value contains all defined values. 

You can also define other attributes - those will be used as XACML authorization 
attributes, with XACML string type.  

PAM
^^^

This is a special attribute source which only works in conjunction
with the corresponding REST authentication module.

----------
container.security.attributes.order=... PAM ...
container.security.attributes.PAM.class=eu.unicore.services.rest.security.PAMAttributeSource
----------


Chained attribute source
^^^^^^^^^^^^^^^^^^^^^^^^

Chained attribute source is a meta source which allows you to mix different combining 
policies together. It is configured as other attribute sources with two parameters 
(except of its class): order and combiningPolicy. The result of the chain attribute 
source is the set of attributes returned by the configured chain. 

Let's consider the following example situation where we want to configure two 
redundant Unity servers (both serving the same data) to achieve high availability. 
Additionally we want to override settings for some
users using a local file attribute source (e.g. to ban selected users, by assigning them 
the 'banned' role).

----------
# The main chain configuration:
container.security.attributes.order=UNITY_CLUSTER FILE
container.security.attributes.combiningPolicy=MERGE_LAST_OVERRIDES

# The FILE source cfg:
container.security.attributes.FILE.class=eu.unicore.uas.security.file.FileBasedAuthoriser
container.security.attributes.FILE.file=<your map file>

# The UNITY_CLUSTER is a sub chain:
container.security.attributes.UNITY_CLUSTER.class=de.fzj.unicore.uas.security.util.AttributeSourcesChain
container.security.attributes.UNITY_CLUSTER.order=UNITY1 UNITY2
container.security.attributes.UNITY_CLUSTER.combiningPolicy=FIRST_ACCESSIBLE

# And configuration of the two real sources used in the sub chain:
container.security.attributes.UNITY1.class=...
...
container.security.attributes.UNITY2.class=...
...
----------  
